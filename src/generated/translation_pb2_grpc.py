# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from src.generated import common_pb2 as common__pb2
from src.generated import translation_pb2 as translation__pb2


class TranslationServiceStub(object):
    """Translation Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Translate = channel.unary_unary(
                '/sokuji.translation.TranslationService/Translate',
                request_serializer=translation__pb2.TranslateRequest.SerializeToString,
                response_deserializer=common__pb2.TranslationResult.FromString,
                )
        self.TranslateBatch = channel.unary_unary(
                '/sokuji.translation.TranslationService/TranslateBatch',
                request_serializer=translation__pb2.TranslateBatchRequest.SerializeToString,
                response_deserializer=translation__pb2.TranslateBatchResponse.FromString,
                )
        self.TranslateStream = channel.stream_stream(
                '/sokuji.translation.TranslationService/TranslateStream',
                request_serializer=translation__pb2.TranslateRequest.SerializeToString,
                response_deserializer=common__pb2.TranslationResult.FromString,
                )
        self.GetSupportedLanguages = channel.unary_unary(
                '/sokuji.translation.TranslationService/GetSupportedLanguages',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=translation__pb2.LanguageListResponse.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/sokuji.translation.TranslationService/HealthCheck',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=common__pb2.HealthCheckResponse.FromString,
                )
        self.GetMetrics = channel.unary_unary(
                '/sokuji.translation.TranslationService/GetMetrics',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=common__pb2.MetricsResponse.FromString,
                )


class TranslationServiceServicer(object):
    """Translation Service
    """

    def Translate(self, request, context):
        """Translate a single text
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TranslateBatch(self, request, context):
        """Translate multiple texts in batch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TranslateStream(self, request_iterator, context):
        """Translate text stream (streaming input, streaming output)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSupportedLanguages(self, request, context):
        """Get supported languages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetrics(self, request, context):
        """Get metrics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TranslationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Translate': grpc.unary_unary_rpc_method_handler(
                    servicer.Translate,
                    request_deserializer=translation__pb2.TranslateRequest.FromString,
                    response_serializer=common__pb2.TranslationResult.SerializeToString,
            ),
            'TranslateBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.TranslateBatch,
                    request_deserializer=translation__pb2.TranslateBatchRequest.FromString,
                    response_serializer=translation__pb2.TranslateBatchResponse.SerializeToString,
            ),
            'TranslateStream': grpc.stream_stream_rpc_method_handler(
                    servicer.TranslateStream,
                    request_deserializer=translation__pb2.TranslateRequest.FromString,
                    response_serializer=common__pb2.TranslationResult.SerializeToString,
            ),
            'GetSupportedLanguages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSupportedLanguages,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=translation__pb2.LanguageListResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=common__pb2.HealthCheckResponse.SerializeToString,
            ),
            'GetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetrics,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=common__pb2.MetricsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sokuji.translation.TranslationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TranslationService(object):
    """Translation Service
    """

    @staticmethod
    def Translate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sokuji.translation.TranslationService/Translate',
            translation__pb2.TranslateRequest.SerializeToString,
            common__pb2.TranslationResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TranslateBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sokuji.translation.TranslationService/TranslateBatch',
            translation__pb2.TranslateBatchRequest.SerializeToString,
            translation__pb2.TranslateBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TranslateStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/sokuji.translation.TranslationService/TranslateStream',
            translation__pb2.TranslateRequest.SerializeToString,
            common__pb2.TranslationResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSupportedLanguages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sokuji.translation.TranslationService/GetSupportedLanguages',
            common__pb2.Empty.SerializeToString,
            translation__pb2.LanguageListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sokuji.translation.TranslationService/HealthCheck',
            common__pb2.Empty.SerializeToString,
            common__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sokuji.translation.TranslationService/GetMetrics',
            common__pb2.Empty.SerializeToString,
            common__pb2.MetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
