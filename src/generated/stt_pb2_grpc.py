# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from src.generated import common_pb2 as common__pb2
from src.generated import stt_pb2 as stt__pb2


class STTServiceStub(object):
    """Speech-to-Text Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Transcribe = channel.unary_unary(
                '/sokuji.stt.STTService/Transcribe',
                request_serializer=stt__pb2.TranscribeRequest.SerializeToString,
                response_deserializer=common__pb2.TranscriptionResult.FromString,
                )
        self.TranscribeStream = channel.stream_stream(
                '/sokuji.stt.STTService/TranscribeStream',
                request_serializer=common__pb2.AudioChunk.SerializeToString,
                response_deserializer=common__pb2.TranscriptionResult.FromString,
                )
        self.GetSupportedLanguages = channel.unary_unary(
                '/sokuji.stt.STTService/GetSupportedLanguages',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=stt__pb2.LanguageListResponse.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/sokuji.stt.STTService/HealthCheck',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=common__pb2.HealthCheckResponse.FromString,
                )
        self.GetMetrics = channel.unary_unary(
                '/sokuji.stt.STTService/GetMetrics',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=common__pb2.MetricsResponse.FromString,
                )


class STTServiceServicer(object):
    """Speech-to-Text Service
    """

    def Transcribe(self, request, context):
        """Transcribe a single audio chunk
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TranscribeStream(self, request_iterator, context):
        """Transcribe audio stream (streaming input, streaming output)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSupportedLanguages(self, request, context):
        """Get supported languages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetrics(self, request, context):
        """Get metrics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_STTServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Transcribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Transcribe,
                    request_deserializer=stt__pb2.TranscribeRequest.FromString,
                    response_serializer=common__pb2.TranscriptionResult.SerializeToString,
            ),
            'TranscribeStream': grpc.stream_stream_rpc_method_handler(
                    servicer.TranscribeStream,
                    request_deserializer=common__pb2.AudioChunk.FromString,
                    response_serializer=common__pb2.TranscriptionResult.SerializeToString,
            ),
            'GetSupportedLanguages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSupportedLanguages,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=stt__pb2.LanguageListResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=common__pb2.HealthCheckResponse.SerializeToString,
            ),
            'GetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetrics,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=common__pb2.MetricsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sokuji.stt.STTService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class STTService(object):
    """Speech-to-Text Service
    """

    @staticmethod
    def Transcribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sokuji.stt.STTService/Transcribe',
            stt__pb2.TranscribeRequest.SerializeToString,
            common__pb2.TranscriptionResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TranscribeStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/sokuji.stt.STTService/TranscribeStream',
            common__pb2.AudioChunk.SerializeToString,
            common__pb2.TranscriptionResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSupportedLanguages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sokuji.stt.STTService/GetSupportedLanguages',
            common__pb2.Empty.SerializeToString,
            stt__pb2.LanguageListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sokuji.stt.STTService/HealthCheck',
            common__pb2.Empty.SerializeToString,
            common__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sokuji.stt.STTService/GetMetrics',
            common__pb2.Empty.SerializeToString,
            common__pb2.MetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
